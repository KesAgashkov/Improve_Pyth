import sys
from decimal import Decimal


class User:

    def __init__(self, name: str, equipment: list = None):
        self.name = name
        self.equipment = equipment if equipment is not None else []
        self.life = 3
        # –ø—Ä–∏–Ω—Ç–∏–º —Ç–æ–ª—å–∫–æ –≤ —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö, –∞ –Ω–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        print(f'–°–æ–∑–¥–∞–ª {self} —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏:\n'f'{self.name = },\t{self.equipment = },\t{self.life= }')


# print('–°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑')
# u_1 = User('–°–ø–µ–Ω–≥–ª–µ—Ä')
# print('–°–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑')
# u_2 = User('–í–µ–Ω–∫–º–∞–Ω', ['–ø—Ä–æ—Ç–æ–Ω–Ω—ã–π —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å', '–ª–æ–≤—É—à–∫–∞'])
# print('–°–æ–∑–¥–∞—ë–º —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑')
# u_3 = User(equipment=['–ª–æ–≤—É—à–∫–∞', '–ø—Ä–∏–±–æ—Ä –Ω–æ—á–Ω–æ–≥–æ –≤–∏–¥–µ–Ω–∏—è'], name='–°—Ç—ç–Ω—Ü')


# –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ __new__
# –ú–µ—Ç–æ–¥ __new__ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–Ω—å—à–µ __init__ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å
# –∫–ª–∞—Å—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ–±—è - –∫–ª–∞—Å—Å–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–Ω–∞—á–∞–ª–µ –æ–±—â–∏–π –ø—Ä–∏–º–µ—Ä.
class User:
    def __init__(self, name: str):
        self.name = name
        print(f'–°–æ–∑–¥–∞–ª {self.name = }')

    def __new__(cls, *args, **kwargs):
        instance = super().__new__(cls)
        print(f'–°–æ–∑–¥–∞–ª –∫–ª–∞—Å—Å {cls}')
        return instance
        print('–°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑')


u_1 = User('–°–ø–µ–Ω–≥–ª–µ—Ä')
print('–°–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑')
u_2 = User('–í–µ–Ω–∫–º–∞–Ω')
print('–°–æ–∑–¥–∞—ë–º —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑')
u_3 = User(name='–°—Ç—ç–Ω—Ü')


# –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤
# –û–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–¥–µ—Ä __new__ ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
# —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ Python. –ù–∞–ø—Ä–∏–º–µ—Ä –º—ã
# —Ö–æ—Ç–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ü–µ–ª–æ–≥–æ —Ç–∏–ø–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç
# –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω–æ–µ —á–∏—Å–ª—É –∏–º—è.
class NamedInt(int):
    def __new__(cls, value, name):
        instance = super().__new__(cls, value)
        instance.name = name
        print(f'–°–æ–∑–¥–∞–ª –∫–ª–∞—Å—Å {cls}')
        return instance


print('–°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑')
a = NamedInt(42, '–ì–ª–∞–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –∂–∏–∑–Ω–∏, –í—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤–æ–æ–±—â–µ')
print('–°–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑')
b = NamedInt(73, '–õ—É—á—à–µ–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ')
print(f'{a = }\t{a.name = }\t{type(a) = }')
print(f'{b = }\t{b.name = }\t{type(b) = }')
c = a + b
print(f'{c = }\t{type(c) = }')


# –®–∞–±–ª–æ–Ω –û–¥–∏–Ω–æ—á–∫–∞, Singleton
# –ï—â—ë –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–¥—Ä–µ __new__ ‚Äî –ø–∞—Ç—Ç–µ—Ä–Ω Singleton. –û–Ω
# –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏—à—å –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞. –í—Ç–æ—Ä–∞—è –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏
# –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä.
# üî• –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –û–¥–∏–Ω–æ—á–∫–∞ –≤
# Python, –∞ –≤–µ—Ä—Å–∏—è —á–µ—Ä–µ–∑ __new__
class Singleton:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, name: str):
        self.name = name


a = Singleton('–ü–µ—Ä–≤—ã–π')
print(f'{a.name = }')
b = Singleton('–í—Ç–æ—Ä–æ–π')
print(f'{a is b = }')
print(f'{a.name = }\n{b.name = }')


# –£–¥–∞–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞, __del__
class User:
    def __init__(self, name: str):
        self.name = name
        print(f'–°–æ–∑–¥–∞–ª {self.name = }')

    def __del__(self):
        print(f'–£–¥–∞–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {self.name}')


# u_1 = User('–°–ø–µ–Ω–≥–ª–µ—Ä')
# print(sys.getrefcount(u_1))
# u_2 = u_1
# print(sys.getrefcount(u_1), sys.getrefcount(u_2))
# del u_1
# print(sys.getrefcount(u_2))
# print('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã')


# –°—Ç—Ä–æ–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
# –ö–∞–∫ –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏–Ω—è—Ç–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å
# –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ –Ω–µ–º—É. –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π
# –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ ‚Äî —Å—Ç—Ä–æ–∫–∏ class ClassName:
# –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä
class User:
    """A User training class for demonstrating class
    documentation.
    Shows the operation of the help(cls) and the dander method
    __doc__"""

    def __init__(self, name: str):
        """Added the name parameter."""
        self.name = name

    def simple_method(self):
        """Example of a simple method."""
        self.name.capitalize()


u_1 = User('–°–ø–µ–Ω–≥–ª–µ—Ä')
print('–°–ø—Ä–∞–≤–∫–∞ –∫–ª–∞—Å—Å–∞ User –Ω–∏–∂–µ', '*' * 50)
help(User)
print('–°–ø—Ä–∞–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ u_1 –Ω–∏–∂–µ', '*' * 50)
help(u_1)


# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ __doc__
# –õ—é–±–∞—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–ª–∞—Å—Å–∞ –∏ –º–µ—Ç–æ–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á—Å–∫–∏–µ
# —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –¥–∞–Ω–¥–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é __doc__. –ü–æ–º–∏–º–æ –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑
# —Ñ—É–Ω–∫—Ü–∏—é help –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫ –Ω–∞–ø—Ä—è–º—É—é –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –∫
# –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
class User:
    """A User training class for demonstrating class
    documentation.
    Shows the operation of the help(cls) and the dander method
    __doc__"""

    def __init__(self, name: str):
        """Added the name parameter."""
        self.name = name
        print(f'–°–æ–∑–¥–∞–ª {self.name = }')

    def simple_method(self):
        """Example of a simple method."""
        self.name.capitalize()


u_1 = User('–°–ø–µ–Ω–≥–ª–µ—Ä')
print(f'–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞: {User.__doc__ = }')
print(f'–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {u_1.__doc__ = }')
print(f'–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞: {u_1.simple_method.__doc__}')


# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, __str__
# –î–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ __str__ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# –æ–ø–∏—Å–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
class User:
    def __init__(self, name: str):
        """Added the name parameter."""
        self.name = name

    def simple_method(self):
        """Example of a simple method."""
        self.name.capitalize()

    def __str__(self):
        return f'–≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ User —Å –∏–º–µ–Ω–µ–º "{self.name}'


user = User('–°–ø–µ–Ω–≥–ª–µ—Ä')
print(user)


# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞,
# __repr__
# –î–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ __repr__ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω __str__, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ–µ –∫
# —Å–æ–∑–¥–∞–Ω–∏—é —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
class User:
    def __init__(self, name: str):
        """Added the name parameter."""
        self.name = name

    def simple_method(self):
        """Example of a simple method."""
        self.name.capitalize()

    def __repr__(self):
        return f'User({self.name})'


user = User('–°–ø–µ–Ω–≥–ª–µ—Ä')
print(user)


# –ï—Å–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ –º–µ—Ç–æ–¥–∞ repr –∏ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –¥–æ–ª–∂–µ–Ω
# –ø–æ–ª—É—á–∏—Ç—Å—è –µ—â—ë –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∫–ª–∞—Å—Å –∏ –µ–≥–æ
# –º–µ—Ç–æ–¥ __repr__.
class User:

    def __init__(self, name: str, equipment: list = None):
        self.name = name
        self.equipment = equipment if equipment is not None else []
        self.life = 3

    def __repr__(self):
        return f'User({self.name}, {self.equipment})'


user = User('–í–µ–Ω–∫–º–∞–Ω', ['–ø—Ä–æ—Ç–æ–Ω–Ω—ã–π —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å', '–ª–æ–≤—É—à–∫–∞'])
print(user)
new_user = repr(user)
print(new_user)


# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ—Ç–æ–¥–æ–≤
# –î–æ–±–∞–≤–∏–º –∫–ª–∞—Å—Å—É –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—à–µ –º–µ—Ç–æ–¥ __str__ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–æ–π –∏–∑ –Ω–∏—Ö
# —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
class User:
    def __init__(self, name: str, equipment: list = None):
        self.name = name
        self.equipment = equipment if equipment is not None else []
        self.life = 3

    def __str__(self):
        eq = '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º: ' + ', '.join(self.equipment) if self.equipment else '–ø—É—Å—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏'
        return f'–ü–µ—Ä–µ–¥ –Ω–∞–º–∏ {self.name} —Å {eq}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π - {self.life}'

    def __repr__(self):
        return f'User({self.name}, {self.equipment})'


user = User('–í–µ–Ω–∫–º–∞–Ω', ['–ø—Ä–æ—Ç–æ–Ω–Ω—ã–π —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å', '–ª–æ–≤—É—à–∫–∞'])
print(user)
print(f'{user}')

print(repr(user))
print(f'{user = }')


# –°–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ __add__
# –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å –≤–µ–∫—Ç–æ—Ä –∏ –Ω–∞—É—á–∏–º –≤–µ–∫—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è.
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __repr__(self):
        return f'Vector({self.x}, {self.y})'

    def __add__(self, other):
        x = self.x + other.x
        y = self.y + other.y
        return Vector(x, y)


a = Vector(2, 4)
b = Vector(3, 7)
c = a + b
print(f'{a = }\t{b = }\t{c = }')


#
# –£–º–Ω–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ ‚Äú–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç‚Äù
# –º–µ—Ç–æ–¥–æ–º __rmul__
# –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ str —Å –º–µ—Ç–æ–¥–æ–º __rmul__. –ï—Å–ª–∏ —Å–ª–µ–≤–∞ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–±—ã—á–Ω–∞—è
# —Å—Ç—Ä–æ–∫–∞, –±—É–¥–µ–º –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ ‚Äú–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å—Ç—Ä–æ–∫–∏‚Äù,
# –ø–µ—Ä–µ–º–Ω–æ–∂–∏–º –∏—Ö.
class StrPro(str):
    def __new__(cls, *args, **kwargs):
        instance = super().__new__(cls, *args, **kwargs)
        return instance

    def __rmul__(self, other: str):
        words = other.split()
        result = self.join(words)
        return StrPro(result)


text = '–ö–∞–∂–¥—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ –∂–µ–ª–∞–µ—Ç –∑–Ω–∞—Ç—å –≥–¥–µ —Å–∏–¥–∏—Ç —Ñ–∞–∑–∞–Ω'
s = StrPro(' (=^.^=) ')
print(f'{text = }\n{s = }')
print(text * s)


# print(s * text)


# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è
# –æ—Å—Ç–∞—Ç–∫–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è, __imod__
# –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å Money, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π
# –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ Money %= float | int


class Money:
    def __init__(self, value: int | float):
        self.value = Decimal(value)

    def __repr__(self):
        return f'Money({self.value:.2f})'

    def __imod__(self, other):
        self.value = self.value * Decimal(1 + other / 100)
        return self


m = Money(100)
print(m)
m %= 50
print(m)
m %= 100
print(m)


# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å, __eq__
# –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –¥–ª–∏–Ω—ã —Ç—Ä—ë—Ö —Å—Ç–æ—Ä–æ–Ω. –í –ø–µ—Ä–≤–æ–º
# –≤–∞—Ä–∏–∞–Ω—Ç–µ –Ω–µ –±—É–¥–µ–º –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–¥–µ—Ä __eq__ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã.
class Triangle:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def __str__(self):
        return f'–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏: {self.a}, {self.b},{self.c}'


one = Triangle(3, 4, 5)
two = one
three = Triangle(3, 4, 5)
print(one == two)
print(one == three)


# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å, __eq__
# –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –¥–ª–∏–Ω—ã —Ç—Ä—ë—Ö —Å—Ç–æ—Ä–æ–Ω. –í –ø–µ—Ä–≤–æ–º
# –≤–∞—Ä–∏–∞–Ω—Ç–µ –Ω–µ –±—É–¥–µ–º –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–¥–µ—Ä __eq__ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã.
class Triangle:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c


    def __str__(self):
        return f'–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏: {self.a}, {self.b},{self.c}'


one = Triangle(3, 4, 5)
two = one
three = Triangle(3, 4, 5)
four = Triangle(4, 3, 5)
print(f'{one == two = }')
print(f'{one == three = }')
print(f'{one == four = }')
print(f'{one != one = }')


from math import sqrt
class Triangle:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def __str__(self):
        return f'–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏: {self.a}, {self.b},{self.c}'

    def __repr__(self):
        return f'Triangle({self.a}, {self.b}, {self.c})'

    def __eq__(self, other):
        first = sorted((self.a, self.b, self.c))
        second = sorted((other.a, other.b, other.c))
        return first == second

    def area(self):
        p = (self.a + self.b + self.c) / 2
        _area = sqrt(p * (p - self.a) * (p - self.b) * (p -
        self.c))
        return _area

    def __lt__(self, other):
        return self.area() < other.area()


one = Triangle(3, 4, 5)
two = Triangle(5, 5, 5)
print(f'{one} –∏–º–µ–µ—Ç –ø–ª–æ—â–∞–¥—å {one.area():.3f} —É.–µ.')
print(f'{two} –∏–º–µ–µ—Ç –ø–ª–æ—â–∞–¥—å {two.area():.3f} —É.–µ.')
print(f'{one > two = }\n{one < two = }')
data = [Triangle(3, 4, 5), Triangle(6, 2, 5), Triangle(4, 4, 4),
Triangle(3, 5, 3)]
result = sorted(data)
print(result)
print(', '.join(f'{item.area():.3f}' for item in result))


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞,
# __getattribute__
# –î–∞–Ω–¥–µ—Ä __getattribute__ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–π –ø–æ–ø—ã—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º
# —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __repr__(self):
        return f'Vector({self.x}, {self.y})'
    def __add__(self, other):
        x = self.x + other.x
        y = self.y + other.y
        return Vector(x, y)
    def __getattribute__(self, item):
        if item == 'z':
            raise AttributeError('–£ –Ω–∞—Å –≤–µ–∫—Ç–æ—Ä –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –∞ –Ω–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ')
        return object.__getattribute__(self, item)


a = Vector(2, 4)
print(a.x)
print(f'{a = }')


# –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞—Ç—Ä–∏–±—É—Ç—É,
# __getattr__
# –ï—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–∞–Ω–¥–µ—Ä __getattribute__. –í
# —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–º –æ—à–∏–±–∫–∏ AttributeError –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ __getattr__. –û–Ω —Ç–∞–∫–∂–µ
# –º–æ–∂–µ—Ç –ø–æ–¥–Ω—è—Ç—å –æ—à–∏–±–∫—É. –ê –º–æ–∂–µ—Ç –∫–∞–∫-—Ç–æ –∏–Ω–∞—á–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __repr__(self):
        return f'Vector({self.x}, {self.y})'
    def __add__(self, other):
        x = self.x + other.x
        y = self.y + other.y
        return Vector(x, y)
    def __getattribute__(self, item):
        if item == 'z':
            raise AttributeError('–£ –Ω–∞—Å –≤–µ–∫—Ç–æ—Ä –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –∞ –Ω–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ')
        return object.__getattribute__(self, item)

    def __setattr__(self, key, value):
        if key == 'z':
            raise AttributeError('–£ –Ω–∞—Å –≤–µ–∫—Ç–æ—Ä –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –∞ –Ω–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ')
        return object.__setattr__(self, key, value)
    def __getattr__(self, item):
        return None
a = Vector(2, 4)
print(a.z) # None
print(f'{a = }')
