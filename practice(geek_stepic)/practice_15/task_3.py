# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
# üìå –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
# ‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
# ‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
# ‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞),
# ‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
# ‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

import logging
from functools import wraps

logging.basicConfig(filename='Log/log_3.log',
                    filemode='w',
                    encoding='utf-8',
                    format='{levelname:<6} - {asctime} –≤ —Å—Ç—Ä–æ–∫–µ {lineno:>3d} —Ñ—É–Ω–∫—Ü–∏—è "{funcName}()" : {msg}',
                    style='{',
                    level=logging.INFO)
logger = logging.getLogger(__name__)


def decor(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        logger.info(f'–∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏: {args}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {result}')
        return result

    return wrapper


@decor
def power_—Ö(x, y):
    return x ** y


print(power_—Ö(2, 10))
print(power_—Ö(5, 3))