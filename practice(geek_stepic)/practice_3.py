# """
# Задание №1
# ✔ Вручную создайте список с целыми числами, которые повторяются. Получите новый список, который содержит
# уникальные (без повтора) элементы исходного списка.
# ✔ *Подготовьте два решения, короткое и длинное, которое не использует другие коллекции помимо списков.
# """
#
# lst = [4, 4, 3, 5, 4, 1]
# print(lst)
# print(list(set(lst)))
#
# new_lst = []
# for el in lst:
#     if el not in new_lst:
#         new_lst.append(el)
# print(sorted(new_lst, reverse=True))
#

# """
# Задание №2
# Погружение в Python | Коллекции
# Пользователь вводит данные. Сделайте проверку данных
# и преобразуйте если возможно в один из вариантов ниже:
# ✔ Целое положительное число
# ✔ Вещественное положительное или отрицательное число
# ✔ Строку в нижнем регистре, если в строке есть
# хотя бы одна заглавная буква
# ✔ Строку в нижнем регистре в остальных случаях
# """
#
# lst = [1, 2.1, True, -5, "Sds"]
# for el in lst:
#     try:
#         print(int(el))
#         print(float(el))
#     except ValueError:
#         print(f"Невозможно преобразовать {el} к целому положительному числу")
#         print(f"Невозможно преобразовать {el} к вещественному числу")
#
# for el in lst:
#     try:
#         if type(el) == str and not el.islower():
#             print(el.lower())
#     except TypeError:
#         print("Ошибка")

# Задание №3
# ✔ Создайте вручную кортеж содержащий элементы разных типов.
# ✔ Получите из него словарь списков, где:
# ключ — тип элемента,
# значение — список элементов данного типа.
# """
#
# a = (1, 2.1, 2, 3, True, None, "ghb")
# dct = {}
# for el_1 in a:
#     obj_type = type(el_1)
#     lst = []
#     for el_2 in a:
#         if type(el_2) == obj_type:
#             lst.append(el_2)
#     dct[obj_type] = lst
#
# print(dct)

# """
# Задание №4
# Погружение в Python | Коллекции
# ✔ Создайте вручную список с повторяющимися элементами.
# ✔ Удалите из него все элементы, которые встречаются дважды.
# """
# lst = [1, 1, 2, 2, 2, 3, 3, 5]
#
# for el_1 in lst:
#     count = 0
#     for el_2 in lst:
#         if el_1 == el_2:
#             count += 1
#     if count == 2:
#         lst.remove(el_1)
#         lst.remove(el_1)
# print(lst)

# """
# Задание №5
# Погружение в Python | Коллекции
# ✔ Создайте вручную список с повторяющимися целыми числами.
# ✔ Сформируйте список с порядковыми номерами нечётных элементов исходного списка.
# ✔ Нумерация начинается с единицы.
# """
#
# lst = [1, 2, 2, 3, 3, 4, 5, 5]
# res = []
# for i in range(len(lst)):
#     if lst[i] % 2 == 1:
#         res.append(i + 1)
# print(res)
# res = [i + 1 for i in range(len(lst)) if lst[i] % 2 == 1]
# print(res)

# """
# Задание №6
# Погружение в Python | Коллекции
# Пользователь вводит строку текста. Вывести каждое слово с новой строки.
# ✔ Строки нумеруются начиная с единицы.
# ✔ Слова выводятся отсортированными согласно кодировки Unicode.
# ✔ Текст выравнивается по правому краю так, чтобы у самого длинного слова был один пробел между ним и номером строки.
# """
#
# texts = "vsdsdsdsdsds dfsfdf atdfdfd fdfdfd".split()
# shift = len(max(texts))
# for n, el in enumerate(sorted(texts), 1):
#     print(f"{n}, {el:>{shift}}")

# """
# Задание №6
# Погружение в Python | Коллекции
# Пользователь вводит строку текста. Вывести каждое слово с новой строки.
# ✔ Строки нумеруются начиная с единицы.
# ✔ Слова выводятся отсортированными согласно кодировки Unicode.
# ✔ Текст выравнивается по правому краю так, чтобы у самого длинного
# слова был один пробел между ним и номером строки.
# """
#
# texts = "vsdsdsdsdsds dfsfdf fdfdfd fdfdfd".split()
# shift = len(max(texts))
# for n, el in enumerate(sorted(texts), 1):
#     print(f"{n}, {el:>{shift}}")

# """
# Задание №7
# Погружение в Python | Коллекции
# ✔ Пользователь вводит строку текста.
# ✔ Подсчитайте сколько раз встречается каждая буква в строке без использования метода count и с ним.
# ✔ Результат сохраните в словаре, где ключ — символ, а значение — частота встречи символа в строке.
# ✔ Обратите внимание на порядок ключей.
# Объясните почему они совпадают или не совпадают в ваших решениях.
# """
#
# # data = input('введите текст: ')
# data = "абракадабра"
# dct = {}
# for elem in data:
#     value = data.count(elem)
#     dct[elem] = value
# print(dct)
#
# data = "абракадабра расширенная"
# dct = {}
# for el_1 in data:
#     count = 0
#     for el_2 in data:
#         if el_1 == el_2:
#             count += 1
#     dct[el_1] = count
# print(dct)

# Задание №8
# Погружение в Python | Коллекции
# ✔ Три друга взяли вещи в поход. Сформируйте
# словарь, где ключ — имя друга, а значение —
# кортеж вещей. Ответьте на вопросы:
# ✔ Какие вещи взяли все три друга
# ✔ Какие вещи уникальны, есть только у одного друга
# ✔ Какие вещи есть у всех друзей кроме одного
# и имя того, у кого данная вещь отсутствует
# ✔ Для решения используйте операции
# с множествами. Код должен расширяться
# на любое большее количество друзей.
# """

# data = {"Вася": ("Палатка", "Котелок", "Спички", "Шашлык"),
#         "Петя": ("Палатка", "Котелок", "Топор"),
#         "Саша": ("Палатка", "Котелок", "Топор", "Спирт"),}
#
# lst = []
# for k,v in data.items():
#     lst.append(set(v))
#
#
# for i in range(len(lst)-2):
#     res_all = lst[i].intersection(lst[i+1])
#     res_all = res_all.intersection(lst[i+2])
#
# # print(res_all)
#
# for i in range(len(lst)-1):
#     res_unic = lst[i].symmetric_difference(lst[i+1])
#     print(res_unic)
#
# print(res_unic)



